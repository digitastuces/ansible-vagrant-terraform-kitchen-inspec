# -*- mode: ruby -*-
# vi: set ft=ruby :

API_VERSION = "2"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(API_VERSION) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/bullseye64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # config.vm.define "host1" do |host1|
  #   host1.vm.network :private_network, ip: "192.168.3.10"
  #   host1.vm.hostname = "host1"
  # end

  (1..3).each do |i|
    config.vm.define "node#{i}" do |node|
    node.vm.network :private_network, ip: "192.168.3.1#{i}"
    # Create a forwarded port
    #node.vm.network "forwarded_port", guest: 80, host: 8080
    node.vm.hostname = "node#{i}"
      node.vm.provision "shell", inline: <<-SHELL
        #sudo apt-get update -y
        touch test.yaml
        sudo mkdir -p /root/.ssh/
      SHELL

      node.vm.provision "ansible" do |ansible|
        ansible.playbook = "playbook-ansible.yml"
      end


      # Vagrant push
      #
      # La commande vagrant push permet d’invoquer une commande shell 
      # ou un script arbitraire dans le cadre d’un push.
      # Par exemple, vous pouvez lancer des playbooks en prenant l’inventaire généré 
      # dans la partie provisioning :
      # 
      node.push.define "local-exec" do |push|
        push.inline = <<-SCRIPT
          ansible-playbook -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory master.yml
          ansible-playbook -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory slave.yml
        SCRIPT
      end



      node.vm.provision "shell" do |s|
        ssh_pub_key = File.readlines("/home/adieng/.ssh/vagrant_rsa.pub").first.strip
        s.inline = <<-SHELL
        echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
        echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
        SHELL
      end
    
      node.vm.provision "file", source: "~/.ssh/vagrant_rsa.pub", destination: "~/.ssh/vagrant_rsa.pub"
    end
  end

  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder '.', '/vagrant', disabled: true

  config.vm.provider "libvirt" do |hv|
    hv.cpus = "1"
    hv.memory = "512"
  end
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  #
  # config.vm.provision "ansible" do |ansible|
  #   ansible.playbook = "site.yml"
  #   ansible.groups = {  
  #     "master" => ["k8s-master"],
  #     "worker" => ["k8s-worker1", "k8s-worker2", "k8s-worker3"],
  #     "kube-cluster:children" => ["master", "worker"]
  #   }
  # end




  config.vm.post_up_message = "Terminé !!!"
end